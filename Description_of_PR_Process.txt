For a complete description of the various input and output signals, please refer to the documentation from the Base Overlay group.

The inputs which we primarily use are the RGB_IN_I, VS_IN_I, and HS_IN_I signals, controlling pixel color, V Sync, and H Sync respectively, as well as the PIXEL_CLK_IN clock signal.

The module is controlled by a simple state machine.  Important details include the following:
The first nonblanked row of each screen will trigger the state machine into the row0 state, which begins filling the pixel buffers without outuputting any information to the video out ports.
The beginRow state is used to deal with edge cases along the left side of the screen.
The pass state is the main operating mode, and averages the combination of new data being fed into the module with data from previous rows, which have been stored in FIFO buffers.
The sentHS and sentVS states are included to deal with blanking periods.

-------------------------------------------------------
-- Compilation
-------------------------------------------------------

The process of compiling modules for Partial Reconfiguration is not automated by the design tools and, as such, must be directed either by the user or by a set of scripts.  The TCL scripts which we used to compile are included in an appendix.

The compilation process centers around the use of design checkpoints.  First, a base design is created.  This contains the framework necessary to support an overlay, defines the area to be used Partial Reconfiguration Region (PR Region), and creates a number of interfaces into and out of the region.  This process has been taken care of by the Base Overlay Group, and has been passed to us as a Design CheckPoint (DCP file).

This base overlay initially interprets the PR Region as a black box, and the tools cannot synthesize the design with an undefined region.  We read in our design as a definition of that black boxed area, and then compile the entire design, both base overlay and filter together, generating a base bitstream.  

With this base overlay created, we can then replace the PR region in the design with other instantiations, and begin compiling partial bitstreams for these as well.  Typically, each of these compilations should create two different bitstreams: a complete design and a partial bitsream, to reconfigure the PR region.  This allows the user to boot the device in whatever configuration they desire.

A device is programmed by writing a complete bitstream to the FPGA.  Once it has been programmed, it is possible to reconfigure it on the fly by writing it with a partial bistream, which will take much less time and, in many instances, does not result in a visible break in performance.





-------------------------------------------------------
-- Appendix A: Compilation Script
-------------------------------------------------------

proc part_gen {str} {
	read_vhdl Source/$str.vhd
	synth_design -mode out_of_context -flatten_hierarchy rebuilt -top Video_Box -part xc7z020clg400-1
	write_checkpoint Synth/$str.dcp -force
	close_project
	
	open_checkpoint Checkpoint/static_route_design.dcp

	read_checkpoint -cell system_i/video/Video_PR_0/U0/Video_PR_v1_0_S_AXI_inst/Video_Box_0 Synth/$str.dcp

	opt_design
	place_design
	route_design

	write_checkpoint -force Implement/$str.dcp

	write_bitstream -file Bitstreams/$str.bit -force

	close_project

}
proc part_bit {str} {
	read_vhdl Source/$str.vhd
	add_files -norecurse C:/projects/lab2/V003/V003/Pynq-Z1/vivado/base/base/base.srcs/sources_1/ip/fifo_generator_0/fifo_generator_0.xci
	export_ip_user_files -of_objects  [get_files  C:/projects/lab2/V003/V003/Pynq-Z1/vivado/base/base/base.srcs/sources_1/ip/fifo_generator_0/fifo_generator_0.xci] -lib_map_path [list {modelsim=./.cache/compile_simlib/modelsim} {questa=./.cache/compile_simlib/questa} {riviera=./.cache/compile_simlib/riviera} {activehdl=./.cache/compile_simlib/activehdl}] -force -quiet
	synth_design -mode out_of_context -flatten_hierarchy rebuilt -top Video_Box -part xc7z020clg400-1
	write_checkpoint Synth/$str.dcp -force
	close_project

	open_checkpoint Checkpoint/static_route_design.dcp

	read_checkpoint -cell system_i/video/Video_PR_0/U0/Video_PR_v1_0_S_AXI_inst/Video_Box_0 Synth/$str.dcp

	opt_design
	place_design
	route_design

	write_checkpoint -force Implement/$str.dcp

	write_bitstream -file Bitstreams/$str.bit -force

	close_project

}

